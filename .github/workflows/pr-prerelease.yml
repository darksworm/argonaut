name: PR Pre-release Build

on:
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  contents: read
  pull-requests: write
  packages: write

jobs:
  check-release-pr:
    runs-on: ubuntu-latest
    outputs:
      is_release_pr: ${{ steps.check.outputs.is_release_pr }}
    steps:
      - name: Check if this is a release-please PR
        id: check
        run: |
          # Check if this is a release-please PR by branch name and title pattern
          if [[ "${{ github.event.pull_request.head.ref }}" =~ ^release-please--branches--main ]] && [[ "${{ github.event.pull_request.title }}" =~ ^chore\(main\):\ release ]]; then
            echo "is_release_pr=true" >> $GITHUB_OUTPUT
            echo "Detected release-please PR: ${{ github.event.pull_request.title }}"
          else
            echo "is_release_pr=false" >> $GITHUB_OUTPUT
            echo "Not a release-please PR - Branch: ${{ github.event.pull_request.head.ref }}, Title: ${{ github.event.pull_request.title }}"
          fi

  build-prerelease:
    needs: check-release-pr
    if: needs.check-release-pr.outputs.is_release_pr == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout PR code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to ghcr.io
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create snapshot version
        id: version
        run: |
          # Extract version from release-please PR title and add -dev suffix
          if [[ "${{ github.event.pull_request.head.ref }}" =~ ^release-please--branches--main ]]; then
            # Extract version from PR title: "chore(main): release X.Y.Z"
            BASE_VERSION=$(echo "${{ github.event.pull_request.title }}" | grep -oP 'release \K[0-9]+\.[0-9]+\.[0-9]+' || echo "")
            if [[ -z "$BASE_VERSION" ]]; then
              VERSION="dev-snapshot-$(git rev-parse --short HEAD)"
            else
              VERSION="${BASE_VERSION}-dev-rc.$(git rev-parse --short HEAD)"
            fi
          else
            VERSION="dev-snapshot-$(git rev-parse --short HEAD)"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Building pre-release version: $VERSION"

      - name: Run GoReleaser release with dev tags (no publishing)
        uses: goreleaser/goreleaser-action@v6
        with:
          distribution: goreleaser
          version: nightly
          args: release --config .goreleaser.release.yml --snapshot --clean --skip=aur,nix
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Package artifacts
        run: |
          mkdir -p pr-artifacts
          # Copy built binaries
          find dist/ -name "argonaut*" -type f -executable -exec cp {} pr-artifacts/ \;
          # Copy Linux packages (deb, rpm, apk)
          find dist/ -name "*.deb" -exec cp {} pr-artifacts/ \;
          find dist/ -name "*.rpm" -exec cp {} pr-artifacts/ \;
          find dist/ -name "*.apk" -exec cp {} pr-artifacts/ \;
          # Create checksums
          cd pr-artifacts
          shasum -a 256 * > checksums.txt
          cd ..

      - name: Upload individual artifacts
        uses: actions/upload-artifact@v4
        with:
          name: argonaut-${{ steps.version.outputs.version }}-binaries-and-packages
          path: pr-artifacts/
          retention-days: 30

      - name: Comment on PR with download link
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const version = '${{ steps.version.outputs.version }}';
            const artifactName = `argonaut-${version}-binaries-and-packages`;

            // List artifacts in pr-artifacts directory
            const artifactFiles = fs.readdirSync('pr-artifacts').filter(f => f !== 'checksums.txt');
            const checksums = fs.readFileSync('pr-artifacts/checksums.txt', 'utf8');

            // Generate direct download links for each file
            const baseUrl = `https://nightly.link/${{ github.repository }}/actions/runs/${{ github.run_id }}`;
            const artifactList = artifactFiles.map(file => {
              // Extract file type for better categorization
              const ext = file.split('.').pop();
              let category = '';
              if (['deb', 'rpm', 'apk'].includes(ext)) {
                category = '📦 ';
              } else if (file.includes('linux') || file.includes('darwin')) {
                category = '🔧 ';
              }
              return `- ${category}[\`${file}\`](${baseUrl}/${artifactName}/${file})`;
            }).join('\n');

            const comment = `## 🚀 Pre-release Build Available

            A pre-release build has been created for this PR with version \`${version}\`.

            ### 📥 Direct Downloads
            ${artifactList}

            ### 🐳 Docker Image
            \`\`\`bash
            docker pull ghcr.io/${{ github.repository }}:${version}
            \`\`\`

            ### 🔍 Checksums
            <details>
            <summary>Click to expand checksums</summary>

            \`\`\`
            ${checksums}
            \`\`\`
            </details>

            ### 📋 Alternative Download
            You can also download all files as a zip from the [Actions tab](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}).

            > **Note:** This is a pre-release build for testing purposes only. The version includes \`-dev\` to clearly indicate it's not an official release.

            ---
            *This comment will be updated on each push to the PR.*`;

            // Find existing comment
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.data.find(comment =>
              comment.user.type === 'Bot' &&
              comment.body.includes('🚀 Pre-release Build Available')
            );

            if (botComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: comment
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: comment
              });
            }

