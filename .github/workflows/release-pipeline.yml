on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write
  packages: write
  id-token: write

name: release-pipeline

jobs:
  release-please:
    runs-on: ubuntu-latest
    outputs:
      release_created: ${{ steps.release.outputs.release_created }}
      tag_name: ${{ steps.release.outputs.tag_name }}
    steps:
      - name: release
        id: release
        uses: googleapis/release-please-action@v4
        with:
          token: ${{ secrets.RELEASE_PLEASE_TOKEN }}
          release-type: go

  publish-npm:
    needs: [release-please, goreleaser]
    if: ${{ needs.release-please.outputs.release_created == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'

      - name: Update package version
        run: |
          VERSION="${{ needs.release-please.outputs.tag_name }}"
          VERSION="${VERSION#v}"  # Remove 'v' prefix if present
          npm version "$VERSION" --no-git-tag-version

      - name: Download release binaries
        run: |
          mkdir -p bin-platform
          TAG="${{ needs.release-please.outputs.tag_name }}"

          # Download all platform binaries from the release
          gh release download "$TAG" \
            --pattern "a9s_Darwin_arm64" \
            --pattern "a9s_Darwin_x86_64" \
            --pattern "a9s_Linux_arm64" \
            --pattern "a9s_Linux_x86_64" \
            --pattern "a9s_Windows_x86_64.exe" \
            --dir bin-platform || true

          # Rename to npm-friendly names
          cd bin-platform
          [ -f a9s_Darwin_arm64 ] && mv a9s_Darwin_arm64 a9s-darwin-arm64
          [ -f a9s_Darwin_x86_64 ] && mv a9s_Darwin_x86_64 a9s-darwin-x64
          [ -f a9s_Linux_arm64 ] && mv a9s_Linux_arm64 a9s-linux-arm64
          [ -f a9s_Linux_x86_64 ] && mv a9s_Linux_x86_64 a9s-linux-x64
          [ -f a9s_Windows_x86_64.exe ] && mv a9s_Windows_x86_64.exe a9s-windows-x64.exe

          # Make them executable
          chmod +x a9s-* || true

          cd ..
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup placeholder bin directory
        run: |
          mkdir -p bin
          echo '#!/usr/bin/env node' > bin/a9s
          echo 'console.log("This will be replaced during postinstall");' >> bin/a9s
          chmod +x bin/a9s
          ln -s a9s bin/argonaut

      - name: Publish to npm
        run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  goreleaser:
    needs: release-please
    if: ${{ needs.release-please.outputs.release_created == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout tag
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ needs.release-please.outputs.tag_name }}

      - name: Setup Git identity
        run: |
          git config --global user.name "goreleaser"
          git config --global user.email "bot@goreleaser.com"

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to ghcr.io
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.RELEASE_PLEASE_TOKEN }}

      - name: Setup SSH key for AUR
        if: env.AUR_SSH_PRIVATE_KEY != ''
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.AUR_SSH_PRIVATE_KEY }}
        env:
          AUR_SSH_PRIVATE_KEY: ${{ secrets.AUR_SSH_PRIVATE_KEY }}

      - name: Import GPG key
        if: env.GPG_PRIVATE_KEY != ''
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.GPG_PRIVATE_KEY_PASSPHRASE }}
        env:
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v6
        with:
          distribution: goreleaser
          version: nightly
          args: release --config .goreleaser.release.yml --clean
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_PLEASE_TOKEN }}          # must have repo:status, repo:write
          HOMEBREW_TAP_GITHUB_TOKEN: ${{ secrets.HOMEBREW_TAP_TOKEN }} # PAT with write on tap repo
          AUR_SSH_PRIVATE_KEY: ${{ secrets.AUR_SSH_PRIVATE_KEY }}
          GPG_FINGERPRINT: ${{ secrets.GPG_FINGERPRINT }}
          TAG: ${{ needs.release-please.outputs.tag_name }}

  integration-tests:
    needs: [release-please, goreleaser]
    if: ${{ needs.release-please.outputs.release_created == 'true' }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        distro:
          - ubuntu:latest
          - debian:latest
          - fedora:latest
          - archlinux:latest
          - manjarolinux/base:latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Test argonaut installation and functionality
        uses: ./.github/actions/test-argonaut-install
        with:
          distro: ${{ matrix.distro }}
          install-source: ${{ needs.release-please.outputs.tag_name }}
          test-mode: release

  npm-integration-tests:
    needs: [release-please, publish-npm]
    if: ${{ needs.release-please.outputs.release_created == 'true' }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        node-version:
          - 18
          - 20
          - 22
          - latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: Wait for npm package availability
        run: |
          VERSION="${{ needs.release-please.outputs.tag_name }}"
          VERSION="${VERSION#v}"
          for i in {1..30}; do
            if npm view argonaut-cli@$VERSION > /dev/null 2>&1; then
              echo "Package available!"
              break
            fi
            echo "Waiting for package... ($i/30)"
            sleep 10
          done

      - name: Test npm installation
        run: |
          npm install -g argonaut-cli
          which argonaut
          which a9s
          argonaut --version || true
          a9s --version || true
