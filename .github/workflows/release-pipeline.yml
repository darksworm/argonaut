on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write
  packages: write
  id-token: write

name: release-pipeline

jobs:
  release-please:
    runs-on: ubuntu-latest
    outputs:
      release_created: ${{ steps.release.outputs.release_created }}
      tag_name: ${{ steps.release.outputs.tag_name }}
    steps:
      - name: release
        id: release
        uses: googleapis/release-please-action@v4
        with:
          token: ${{ secrets.RELEASE_PLEASE_TOKEN }}
          release-type: node

  publish:
    needs: release-please
    if: ${{ needs.release-please.outputs.release_created == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - uses: oven-sh/setup-bun@v2
        with:
          bun-version-file: .bun-version

      - run: bun install --frozen-lockfile

      - name: Build
        run: bun run build:node

      - name: Configure npm auth
        run: |
          echo "//registry.npmjs.org/:_authToken=${NODE_AUTH_TOKEN}" > ~/.npmrc
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Publish to npm
        run: npm publish --access public

  goreleaser:
    needs: [release-please, publish]
    if: ${{ needs.release-please.outputs.release_created == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version-file: .bun-version

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Setup SSH key for AUR
        if: env.AUR_SSH_PRIVATE_KEY != ''
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.AUR_SSH_PRIVATE_KEY }}
        env:
          AUR_SSH_PRIVATE_KEY: ${{ secrets.AUR_SSH_PRIVATE_KEY }}

      - name: Build binaries with Bun
        run: |
          # Create the binaries directory
          mkdir -p dist
          
          # Build for each target
          echo "Building Linux AMD64..."
          bun run build:binary -- --target=bun-linux-x64 --outfile dist/argonaut-linux-amd64
          
          echo "Building Linux ARM64..."  
          bun run build:binary -- --target=bun-linux-arm64 --outfile dist/argonaut-linux-arm64
          
          echo "Building Darwin AMD64..."
          bun run build:binary -- --target=bun-darwin-x64 --outfile dist/argonaut-darwin-amd64
          
          echo "Building Darwin ARM64..."
          bun run build:binary -- --target=bun-darwin-arm64 --outfile dist/argonaut-darwin-arm64
          
          # Make binaries executable
          chmod +x dist/argonaut-*
          
          # List built binaries
          ls -la dist/

      - name: Import GPG key
        if: env.GPG_PRIVATE_KEY != ''
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.GPG_PRIVATE_KEY_PASSPHRASE }}
        env:
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v6
        with:
          distribution: goreleaser
          version: latest
          args: release --config .goreleaser.release.yml --clean
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_PLEASE_TOKEN }}
          HOMEBREW_TAP_GITHUB_TOKEN: ${{ secrets.HOMEBREW_TAP_TOKEN }}
          AUR_SSH_PRIVATE_KEY: ${{ secrets.AUR_SSH_PRIVATE_KEY }}
          GPG_FINGERPRINT: ${{ secrets.GPG_FINGERPRINT }}
          TAG: ${{ needs.release-please.outputs.tag_name }}
