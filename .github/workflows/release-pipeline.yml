name: release-pipeline

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write
  packages: write
  id-token: write

jobs:
  release-please:
    runs-on: ubuntu-latest
    outputs:
      release_created: ${{ steps.release.outputs.release_created }}
      tag_name: ${{ steps.release.outputs.tag_name }}
    steps:
      - name: release
        id: release
        uses: googleapis/release-please-action@v4
        with:
          token: ${{ secrets.RELEASE_PLEASE_TOKEN }}
          release-type: go

  goreleaser:
    needs: release-please
    if: ${{ needs.release-please.outputs.release_created == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout tag
        uses: actions/checkout@v4
        with:
          # Fetch recent tags for GoReleaser changelog generation
          fetch-depth: 100
          ref: ${{ needs.release-please.outputs.tag_name }}

      - name: Fetch tags for GoReleaser
        run: git fetch --tags --force

      - name: Setup Git identity
        run: |
          git config --global user.name "goreleaser"
          git config --global user.email "bot@goreleaser.com"

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to ghcr.io
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.RELEASE_PLEASE_TOKEN }}

      - name: Setup SSH key for AUR
        if: env.AUR_SSH_PRIVATE_KEY != ''
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.AUR_SSH_PRIVATE_KEY }}
        env:
          AUR_SSH_PRIVATE_KEY: ${{ secrets.AUR_SSH_PRIVATE_KEY }}

      - name: Import GPG key
        if: env.GPG_PRIVATE_KEY != ''
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.GPG_PRIVATE_KEY_PASSPHRASE }}
        env:
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v6
        with:
          distribution: goreleaser
          version: nightly
          args: release --config .goreleaser.release.yml --clean
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_PLEASE_TOKEN }}          # must have repo:status, repo:write
          HOMEBREW_TAP_GITHUB_TOKEN: ${{ secrets.HOMEBREW_TAP_TOKEN }} # PAT with write on tap repo
          AUR_SSH_PRIVATE_KEY: ${{ secrets.AUR_SSH_PRIVATE_KEY }}
          GPG_FINGERPRINT: ${{ secrets.GPG_FINGERPRINT }}
          TAG: ${{ needs.release-please.outputs.tag_name }}

      - name: Upload GoReleaser artifacts for npm publishing
        uses: actions/upload-artifact@v4
        with:
          name: goreleaser-dist-release
          path: dist/
          retention-days: 1

  integration-tests:
    needs: [release-please, goreleaser]
    if: ${{ needs.release-please.outputs.release_created == 'true' }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        distro:
          - ubuntu:latest
          - debian:latest
          - fedora:latest
          - archlinux:latest
          - manjarolinux/base:latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Test argonaut installation and functionality
        uses: ./.github/actions/test-argonaut-install
        with:
          distro: ${{ matrix.distro }}
          install-source: ${{ needs.release-please.outputs.tag_name }}
          test-mode: release

  aur-integration-tests:
    needs: [release-please, goreleaser]
    if: ${{ needs.release-please.outputs.release_created == 'true' }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        distro:
          - archlinux:latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Test argonaut AUR installation and functionality
        shell: bash
        run: |
          echo "🏗️ Testing argonaut AUR installation on ${{ matrix.distro }}"
          echo "📦 Testing AUR package installation via yay"

          docker run --rm ${{ matrix.distro }} sh -c '
            set -e
            echo "=== System Information ==="
            echo "Distribution: ${{ matrix.distro }}"
            uname -a

            echo "=== Installing Base Dependencies ==="
            pacman -Syu --noconfirm
            pacman -S --noconfirm base-devel git sudo
            echo "✅ Installed base dependencies"

            echo "=== Setting up AUR user ==="
            useradd -m -G wheel auruser
            echo "%wheel ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers
            echo "✅ Created AUR user with sudo privileges"

            echo "=== Installing yay AUR helper ==="
            su - auruser -c "
              git clone https://aur.archlinux.org/yay.git
              cd yay
              makepkg -si --noconfirm
              echo \"✅ yay installed successfully\"
            "

            echo "=== Installing argonaut from AUR ==="
            su - auruser -c "
              yay -S argonaut --noconfirm
              echo \"✅ argonaut installed from AUR\"
            "

            echo "=== Verifying Installation ==="
            if ! command -v argonaut >/dev/null 2>&1; then
              echo "❌ ERROR: argonaut command not found after AUR installation"
              echo "PATH: $PATH"
              exit 1
            fi
            echo "✅ Argonaut binary installed and available in PATH"

            # Get binary info
            echo "📍 Binary location: $(which argonaut)"
            echo "📊 Binary size: $(ls -lh $(which argonaut) | awk '\''{print $5}'\'')"

            echo "=== Testing Basic Functionality ==="
            # Test version command
            argonaut --version || {
              echo "❌ ERROR: argonaut --version failed"
              exit 1
            }
            echo "✅ Version command works"

            # Test help command
            argonaut --help || {
              echo "❌ ERROR: argonaut --help failed"
              exit 1
            }
            echo "✅ Help command works"

            echo ""
            echo "🎉 ✅ AUR INSTALLATION TEST PASSED on ${{ matrix.distro }}"
            echo "   📦 AUR Installation: SUCCESS"
            echo "   🔧 Basic Commands: SUCCESS"
          '

